#!/usr/bin/env ruby

require 'rake'
require '../common'
require 'objective-j'
require 'objective-j/bundle'


$PRODUCT = 'AppKit' + $CONFIGURATION
$ENVIRONMENT_PRODUCT = File.join($ENVIRONMENT_FRAMEWORKS_DIR, 'AppKit')

task :build => [$PRODUCT, $ENVIRONMENT_PRODUCT]

Specs = {}

AppKitFiles = FileList['**/*.j'].exclude('CoreGraphics/CGContextCanvas.j', 'CoreGraphics/CGContextVML.j', 'Themes/**')

# Debug Framework
Specs[:AppKitDebug] = ObjectiveJ::BundleSpecification.new do |s|
    s.name                  = 'AppKit'
    s.identifier            = 'com.280n.AppKit'
    s.version               = '0.6.5'
    s.author                = '280 North, Inc.'
    s.email                 = 'feedback @nospam@ 280north.com'
    s.summary               = 'AppKit classes for Cappuccino'
    s.sources               = AppKitFiles
    s.resources             = FileList['Resources/*']
    s.license               = ObjectiveJ::License::LGPL_v2_1
    s.build_path            = File.join($BUILD_DIR, 'Debug', 'AppKit')
    s.intermediates_path    = File.join($BUILD_DIR, 'AppKit.build', 'Debug')
    s.flags                 = ['PLATFORM_DOM', 'DEBUG']
end

bundle Specs[:AppKitDebug], :AppKitDebug

# Release Framework
Specs[:AppKitRelease] = ObjectiveJ::BundleSpecification.new do |s|
    s.name                  = 'AppKit'
    s.identifier            = 'com.280n.AppKit'
    s.version               = '0.6.5'
    s.author                = '280 North, Inc.'
    s.email                 = 'feedback @nospam@ 280north.com'
    s.summary               = 'AppKit classes for Cappuccino'
    s.sources               = AppKitFiles
    s.resources             = FileList['Resources/*']
    s.license               = ObjectiveJ::License::LGPL_v2_1
    s.build_path            = File.join($BUILD_DIR, 'Release', 'AppKit')
    s.intermediates_path    = File.join($BUILD_DIR, 'AppKit.build', 'Release')
    s.flag                  = 'PLATFORM_DOM'
end

bundle Specs[:AppKitRelease], :AppKitRelease

#Framework in environment directory
file_d $ENVIRONMENT_PRODUCT => [$PRODUCT] do
    cp_r(Specs[$PRODUCT.to_sym].build_path, $ENVIRONMENT_PRODUCT)
end
